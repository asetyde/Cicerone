/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package elaboratolinguaggiecompilatori;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author Fabio
 */
public class Interpreter extends javax.swing.JFrame {

    private VariablesList variablesList;
    private FunctionsList functionsList;
    private GrammarAnalyzer grammarAnalyzer;
    private Executor executor;
    private String text = "";
    private String oldText = "";
    private boolean debugMode = false;

    public Interpreter() {
        variablesList = new VariablesList();
        functionsList = new FunctionsList();
        grammarAnalyzer = new GrammarAnalyzer(variablesList, functionsList);
        executor = new Executor(variablesList, functionsList);
        initComponents();
        executor.setConsoles(console);
        ClipboardPopupMenu cb = ClipboardPopupMenu.installForComponent(commandsText);
        cb.addCopyFunction("Copia");
        cb.addCutFunction("Taglia");
        cb.addPasteFunction("Incolla");
        ClipboardPopupMenu cbConsole = ClipboardPopupMenu.installForComponent(console);
        cbConsole.addCopyFunction("Copia");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        debugButton = new javax.swing.JToggleButton();
        interpreterLabel = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        consoleScrollPanel = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        helpButton = new javax.swing.JButton();
        checkGrammarButton = new javax.swing.JButton();
        ExeButton = new javax.swing.JButton();
        scriptMode = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandsText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        helpButton1 = new javax.swing.JButton();
        helpButton3 = new javax.swing.JButton();
        barra = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        apriMenu = new javax.swing.JMenuItem();
        salvaMenu = new javax.swing.JMenuItem();
        chiudiMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 500));
        setResizable(false);

        debugButton.setText("DEBUG MODE");
        debugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugButtonActionPerformed(evt);
            }
        });

        interpreterLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        interpreterLabel.setText("CICERONE");

        ExitButton.setText("EXIT");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        consoleScrollPanel.setViewportView(console);

        helpButton.setText("HELP");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        checkGrammarButton.setText("CHECK");
        checkGrammarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkGrammarButtonActionPerformed(evt);
            }
        });

        ExeButton.setText("EXE");
        ExeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExeButtonActionPerformed(evt);
            }
        });

        scriptMode.setText("Active Script Mode");
        scriptMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scriptModeActionPerformed(evt);
            }
        });

        commandsText.setColumns(20);
        commandsText.setRows(5);
        jScrollPane1.setViewportView(commandsText);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel1.setText("Simple Interpreter with dedicated language");

        jLabel2.setText("Put your code :");

        jLabel3.setText("Monitor :");

        helpButton1.setText("ENTER MODE");
        helpButton1.setEnabled(false);
        helpButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButton1ActionPerformed(evt);
            }
        });

        helpButton3.setText("GUIDE");
        helpButton3.setEnabled(false);
        helpButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButton3ActionPerformed(evt);
            }
        });

        barra.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        file.setText("File");

        apriMenu.setText("Open");
        apriMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apriMenuActionPerformed(evt);
            }
        });
        file.add(apriMenu);

        salvaMenu.setText("Save");
        salvaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaMenuActionPerformed(evt);
            }
        });
        file.add(salvaMenu);

        chiudiMenu.setText("Exit");
        chiudiMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chiudiMenuActionPerformed(evt);
            }
        });
        file.add(chiudiMenu);

        barra.add(file);

        setJMenuBar(barra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(interpreterLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(208, 208, 208)
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(helpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ExeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(checkGrammarButton))
                                    .addComponent(helpButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addComponent(scriptMode)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(helpButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(debugButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(consoleScrollPanel))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ExitButton)
                            .addComponent(debugButton)
                            .addComponent(scriptMode)
                            .addComponent(helpButton1))
                        .addGap(713, 713, 713))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(interpreterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(consoleScrollPanel)
                                    .addComponent(jScrollPane1))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(checkGrammarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ExeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(helpButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(helpButton3)
                                .addGap(282, 282, 282))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void debugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugButtonActionPerformed
        oldText = console.getText();

        if (debugMode == true) {
            oldText += "Debug Mode Disable\n";
            grammarAnalyzer.debugMode = false;
            executor.debugMode = false;
            debugMode = false;
        } else {
            oldText += "Debug Mode\n";
            grammarAnalyzer.debugMode = true;
            executor.debugMode = true;
            debugMode = true;
        }

        console.setText(oldText + "\n");
    }//GEN-LAST:event_debugButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        //if(log)printlog
       new ExitDialog();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        oldText = console.getText();

        oldText
                += "Help Mode:\n\n "
                + "Variables and functions can be initialized out of every cycles\n\n"
                + "Commands:\n\n"
                + " Variables:\n"
                + "     var type name;\n"
                + "     initvar type name value;\n"
                + "     setvar name value;\n"
                + "     initArray type name dimension;\n"
                + "     setArray name index value;\n"
                + " Type are 'int', 'float', 'double' and 'String' without ''\n\n"
                + " Cycle:\n"
                + "     if condition then  ... done; [elseif condition then ... done;][else ... done;]\n"
                + "     while condition then ... done;\n"
                + "     for type variable=value condition valueOfIncrementForVariable then ... done;\n "
                + " Condition is in format Var-Number-String(operator)Var-Number-String\n"
                + " Operator without () is like '==', '!=', 'isEquals', 'isNotEquals', '>', '>=', '<' and '<=' naturally without ''\n\n"
                + " Operation:\n"
                + "     op variableThatTakeValue Var-String-Num math Var-String-Num\n"
                + " In the grammar analyzer the Type used are controlled\n"
                + " Math are like '+', '-', '*', '/' without ''\n\n"
                + " Assignament:\n"
                + "     assign variable variable;\n\n"
                + " Print:                                                                                   \n "
                + "     print text_or_variable;\n\n"
                + " Particoular console commands:\n"
                + " clean;       clean console\n"
                + " authors;     show authors and project, also other informations about project\n"
                + " log;       create a log file\n"
                + " reset;       reset all variables and all functions\n";
        console.setText(oldText + "\n");

    }//GEN-LAST:event_helpButtonActionPerformed

    private String returnCommands(String text) {
        String splitting[] = text.split("\r");
        text = "";

        for (int i = 0; i < splitting.length; i++) {
            if (!splitting[i].equals(" ")) {
                text += splitting[i] + " ";
            }

        }
        splitting = text.split("\n");
        text = "";

        for (int i = 0; i < splitting.length; i++) {
            if (!splitting[i].equals(" ")) {
                text += splitting[i] + " ";
            }
        }
        splitting = text.split("\t");
        text = "";
        for (int i = 0; i < splitting.length; i++) {
            text += splitting[i] + " ";
        }

        splitting = text.split(" ");
        text = "";
        for (int i = 0; i < splitting.length; i++) {
            if (!splitting[i].equals("")) {
                text += splitting[i] + " ";
            }
        }

        return text;
    }

    private void reset() {
        variablesList.removeAll();
        functionsList.removeAll();
    }

    private void checkGrammarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkGrammarButtonActionPerformed
        if (scriptMode.isSelected()) {
            reset();
        }
        text = commandsText.getText().trim();
        text = returnCommands(text);
        if (!text.equals("")) {
            oldText = console.getText();
            oldText += "> " + text + "\n";
            grammarAnalyzer.setCommands(text);
            grammarAnalyzer.examination();
            //grammarAnalyzer.examination(variablesList, functionsList);
            //Controllo presenza di errori
            ErrorsList errorsList = grammarAnalyzer.getErrorsList();

            if (errorsList.size() > 0) {
            //Compilazione di text con gli errori trovati
                oldText += "Error (" + errorsList.getError(0).code+"\n";
            } else {
                oldText += "Grammar OK\n";
            }
            //Qui dovrà essere passato alla console
            console.setText(oldText + "\n");

        }
    }//GEN-LAST:event_checkGrammarButtonActionPerformed

    private void ExeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExeButtonActionPerformed
        if (scriptMode.isSelected()) {

            reset();
        }
        text = commandsText.getText().trim();
        text = returnCommands(text);
        if (!text.equals("")) {
            oldText = console.getText();
            oldText += "> " + text + "\n";
            grammarAnalyzer.setCommands(text);
            grammarAnalyzer.examination();
            ErrorsList errorsList = grammarAnalyzer.getErrorsList();
            if (errorsList.size() > 0) {
                oldText += "Error ("+errorsList.getError(0).code+ "\n";
            } else {
                executor.setOldText(oldText);              
                executor.setCommands(grammarAnalyzer.getCommandsList());
                if(!executor.execution()) {
                    errorsList = executor.getErrorsList();
                    if (errorsList.size() > 0) {
                        oldText = executor.getText();
                        oldText += "Error: " + errorsList.getError(0).code+ "\n";
                    }
                }
                else {
                    if (!scriptMode.isSelected()) {
                        commandsText.setText("");
                    }
                    oldText = executor.getText();
                }
            }
            console.setText(oldText + "\n");
        }
    }//GEN-LAST:event_ExeButtonActionPerformed

    private void scriptModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scriptModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scriptModeActionPerformed

    private void chiudiMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chiudiMenuActionPerformed
        new ExitDialog();
    }//GEN-LAST:event_chiudiMenuActionPerformed

    private void apriMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apriMenuActionPerformed
        FileChooser fileChooser = new FileChooser(this);

        File selectedFile = fileChooser.getSelectedFile();
        if (selectedFile != null) {
            // System.out.println(selectedFile.toString());          
            if (selectedFile.toString().endsWith(".wtf")) {
                //  fileChooser = new FileChooser(this);
                if (fileChooser.getExists()) {
                    selectedFile = fileChooser.getSelectedFile();
                    System.out.println(selectedFile.toString());
                }

                ImportScript imports = new ImportScript(selectedFile.toString()); //read file
                if (imports.getControl()) {
                    scriptMode.setSelected(true);
                    reset();
                    commandsText.setText(imports.getText()); //print contain file
                } else {
                    new MessaggioJFileChooser((short) 1); //impossibile read file
                }                //new ConfermaUscita();
            } else {
                new MessaggioJFileChooser((short) 0); //error format file
            }
        }

    }//GEN-LAST:event_apriMenuActionPerformed

    private void salvaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaMenuActionPerformed
        String Test = commandsText.getText();
        FileChooser saveChooser = new FileChooser(this, Test);
        File toSave = saveChooser.getSelectedFile();
        if (toSave != null) {
            try (FileWriter fw = new FileWriter(toSave + ".wtf")) {
                fw.write(Test.toString());
            } catch (IOException y) {
                new MessaggioJFileChooser((short) 2);
            }   // TODO add your handling code here:
        }
    }//GEN-LAST:event_salvaMenuActionPerformed

    private void helpButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpButton1ActionPerformed

    private void helpButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interpreter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interpreter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interpreter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interpreter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interpreter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExeButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JMenuItem apriMenu;
    private javax.swing.JMenuBar barra;
    private javax.swing.JButton checkGrammarButton;
    private javax.swing.JMenuItem chiudiMenu;
    private javax.swing.JTextArea commandsText;
    private javax.swing.JTextArea console;
    private javax.swing.JScrollPane consoleScrollPanel;
    private javax.swing.JToggleButton debugButton;
    private javax.swing.JMenu file;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton helpButton1;
    private javax.swing.JButton helpButton3;
    private javax.swing.JLabel interpreterLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem salvaMenu;
    private javax.swing.JCheckBox scriptMode;
    // End of variables declaration//GEN-END:variables
}
